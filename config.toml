[llm]
model = "gemma3"
#model = "claude-3.5-sonnet-v2"
#model = "gpt4o"
api_key = "sk-1234"
base_url = "http://localhost:11434/v1/chat/completions"
#base_url = "http://localhost:4000/v1/chat/completions"
max_tokens = 4096
temperature = 0.8

[chunking]
chunk_size = 100  # Number of words per chunk
overlap = 20      # Number of words to overlap between chunks

[prompts]
system_prompt = """
You are an advanced AI system specialized in knowledge extraction and knowledge graph generation.
"""
user_prompt = """
Your task: Read the text below (delimited by triple backticks) and identify all Subject-Predicate-Object (S-P-O) relationships in each sentence. Then produce a single JSON array of objects, each representing one triple.

Follow these rules carefully:

- Atomic Terms: Identify distinct key terms (e.g., objects, locations, organizations, acronyms, people, conditions, concepts, feelings). Avoid merging multiple ideas into one term (they should be as "atomistic" as possible).
- Unified References: Replace any pronouns (e.g., "he," "she," "it," "they," etc.) with the actual referenced entity, if identifiable.
- Pairwise Relationships: If multiple terms co-occur in the same sentence (or a short paragraph that makes them contextually related), create one triple for each pair that has a meaningful relationship.
- Predicate: Use a short phrase (ideally 1 to 3 words) to describe how the subject relates to the object. Ensure that all possible relationships are identifed in the text and are captured in an S-P-O relation.. 

Output Requirements:

- Do not include any text or commentary outside of the JSON.
- Return only the JSON array, with each triple as an object containing "subject", "predicate", and "object".
- Make sure the JSON is valid and properly formatted.

Example of the desired output structure:

[
  {
    "subject": "Term A",
    "predicate": "relates to",
    "object": "Term B"
  },
  {
    "subject": "Term C",
    "predicate": "uses",
    "object": "Term D"
  }
]

Important: Only output the JSON array (with the S-P-O objects) and nothing else

Text to analyze (between triple backticks):
""" 
